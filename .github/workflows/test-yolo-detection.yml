name: Test et validation du système de détection YOLO

on:
  push:
    branches: [ main, master ]
    paths: 
      - 'ai/**'
      - '.github/workflows/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'ai/**'
  workflow_dispatch:

jobs:
  validate-yolo-detection:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Configuration de Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Cache des dépendances pip
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Installation des dépendances système
      run: |
        sudo apt-get update
        sudo apt-get install -y libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 libxrender-dev libgomp1
        
    - name: Installation des dépendances Python
      run: |
        python -m pip install --upgrade pip
        pip install ultralytics opencv-python numpy pytest
        
    - name: Vérification de la structure du projet
      run: |
        echo "🔍 Vérification de la structure du projet..."
        if [ ! -f "ai/body_tracking.py" ]; then
          echo "❌ Le fichier ai/body_tracking.py est manquant"
          exit 1
        fi
        echo "✅ Structure du projet validée"
        
    - name: Validation de la syntaxe Python
      run: |
        echo "🐍 Validation de la syntaxe Python..."
        python -m py_compile ai/body_tracking.py
        echo "✅ Syntaxe Python validée"
        
    - name: Test des imports et dépendances
      run: |
        echo "📦 Test des imports..."
        python -c "
        try:
            from ultralytics import YOLO
            import cv2
            import numpy as np
            print('✅ Tous les imports sont disponibles')
        except ImportError as e:
            print(f'❌ Erreur d'import: {e}')
            exit(1)
        "
        
    - name: Validation du modèle YOLO
      run: |
        echo "🤖 Test de chargement du modèle YOLO..."
        python -c "
        from ultralytics import YOLO
        try:
            model = YOLO('yolo11n.pt')
            print('✅ Modèle YOLO chargé avec succès')
            print(f'📊 Classes disponibles: {len(model.names)} classes')
            
            # Vérifier la présence de la classe 'cell phone'
            if 'cell phone' in model.names.values():
                print('✅ Classe \"cell phone\" trouvée dans le modèle')
            else:
                print('⚠️  Classe \"cell phone\" non trouvée')
                print(f'Classes disponibles: {list(model.names.values())}')
        except Exception as e:
            print(f'❌ Erreur lors du chargement du modèle: {e}')
            exit(1)
        "
        
    - name: Test de validation du code (sans caméras)
      run: |
        echo "🧪 Test de validation du code principal..."
        python -c "
        import sys
        import os
        sys.path.append('ai')
        
        # Test de validation sans exécution complète
        from ultralytics import YOLO
        import cv2
        import numpy as np
        
        print('✅ Test de base réussi')
        
        # Simulation d'une frame de test
        model = YOLO('yolo11n.pt')
        test_frame = np.zeros((480, 640, 3), dtype=np.uint8)
        
        try:
            results = model(test_frame)
            annotated_frame = results[0].plot()
            print('✅ Pipeline de détection fonctionnel')
        except Exception as e:
            print(f'❌ Erreur dans le pipeline: {e}')
            exit(1)
        "
        
    - name: Analyse de la qualité du code
      run: |
        echo "📊 Analyse de la qualité du code..."
        pip install flake8
        
        # Ignorer certaines erreurs spécifiques à OpenCV et YOLO
        flake8 ai/body_tracking.py --max-line-length=100 --ignore=E501,W503 || echo "⚠️  Quelques avertissements de style détectés"
        
    - name: Génération du rapport de test
      run: |
        echo "📋 Génération du rapport de test..."
        echo "## 🎯 Rapport de validation YOLO Detection" > test_report.md
        echo "" >> test_report.md
        echo "### ✅ Tests réussis:" >> test_report.md
        echo "- Structure du projet validée" >> test_report.md
        echo "- Syntaxe Python correcte" >> test_report.md
        echo "- Dépendances installées" >> test_report.md
        echo "- Modèle YOLO fonctionnel" >> test_report.md
        echo "- Pipeline de détection opérationnel" >> test_report.md
        echo "" >> test_report.md
        echo "### 📊 Informations système:" >> test_report.md
        echo "- Python: $(python --version)" >> test_report.md
        echo "- OpenCV: $(python -c 'import cv2; print(cv2.__version__)')" >> test_report.md
        echo "- NumPy: $(python -c 'import numpy; print(numpy.__version__)')" >> test_report.md
        echo "- Date: $(date)" >> test_report.md
        
        cat test_report.md
        
    - name: Upload du rapport
      uses: actions/upload-artifact@v3
      with:
        name: test-report
        path: test_report.md
