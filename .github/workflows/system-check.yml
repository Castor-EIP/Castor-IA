name: V√©rification des ressources syst√®me

on:
  push:
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    # Ex√©cuter tous les lundis √† 9h00 UTC
    - cron: '0 9 * * 1'

jobs:
  check-system-resources:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout du code
      uses: actions/checkout@v4
      
    - name: Informations syst√®me de base
      run: |
        echo "üñ•Ô∏è  Informations syst√®me pour YOLO Detection"
        echo "=============================================="
        echo ""
        
        echo "üìä Processeur:"
        lscpu | grep "Model name" | head -1
        echo "C≈ìurs disponibles: $(nproc)"
        echo ""
        
        echo "üß† M√©moire:"
        free -h
        echo ""
        
        echo "üíæ Espace disque:"
        df -h | head -2
        echo ""
        
    - name: V√©rification des d√©pendances vid√©o
      run: |
        echo "üìπ V√©rification du support vid√©o pour OpenCV"
        echo "============================================"
        
        # Installer les outils n√©cessaires
        sudo apt-get update -qq
        sudo apt-get install -y v4l-utils ffmpeg
        
        echo "‚úÖ Pilotes vid√©o install√©s"
        echo ""
        
        echo "üé• P√©riph√©riques vid√©o disponibles:"
        if ls /dev/video* 2>/dev/null; then
          echo "P√©riph√©riques trouv√©s !"
        else
          echo "Aucun p√©riph√©rique vid√©o physique (normal en CI)"
        fi
        echo ""
        
        echo "üîß Codecs vid√©o disponibles:"
        ffmpeg -codecs 2>/dev/null | grep -E "(h264|mjpeg|rawvideo)" | head -5
        
    - name: Test de performance r√©seau
      run: |
        echo "üåê Test de connectivit√© r√©seau"
        echo "============================="
        
        echo "üì° Test de ping vers des serveurs communs:"
        ping -c 3 8.8.8.8 || echo "Ping Google DNS √©chou√©"
        echo ""
        
        echo "üè† Test de connectivit√© locale (simulation IP cam√©ra):"
        echo "IP cam√©ra configur√©e: 10.67.164.84:4747"
        echo "‚ö†Ô∏è  Test r√©el impossible en CI (r√©seau isol√©)"
        echo ""
        
        echo "‚è±Ô∏è  Latence r√©seau locale simul√©e:"
        ping -c 2 localhost | tail -1
        
    - name: Test simple de performance
      run: |
        echo "‚ö° Test de performance CPU pour YOLO"
        echo "==================================="
        
        echo "üßÆ Test de calcul simple:"
        time python3 -c "sum(i*i for i in range(100000))"
        
        echo ""
        echo "üìà Utilisation CPU:"
        top -bn1 | grep "Cpu(s)" | head -1
        
    - name: V√©rification de l'espace pour les mod√®les YOLO
      run: |
        echo "üì¶ V√©rification de l'espace pour les mod√®les YOLO"
        echo "=============================================="
        
        echo "üíæ Espace disque disponible:"
        df -h . | tail -1
        echo ""
        
        echo "üìã Tailles typiques des mod√®les YOLO:"
        echo "- yolo11n.pt: ~6 MB (nano)"
        echo "- yolo11s.pt: ~22 MB (small)"
        echo "- yolo11m.pt: ~50 MB (medium)"
        echo "- yolo11l.pt: ~88 MB (large)"
        echo "- yolo11x.pt: ~136 MB (extra-large)"
        echo ""
        
        # V√©rifier si on a assez d'espace pour les gros mod√®les
        available_mb=$(df . | tail -1 | awk '{print int($4/1024)}')
        echo "üîç Espace disponible: ${available_mb} MB"
        
        if [ $available_mb -gt 150 ]; then
          echo "‚úÖ Assez d'espace pour tous les mod√®les YOLO"
        elif [ $available_mb -gt 50 ]; then
          echo "‚ö†Ô∏è  Espace suffisant pour les mod√®les petits/moyens"
        else
          echo "‚ùå Espace insuffisant pour les gros mod√®les"
        fi
        
    - name: G√©n√©ration du rapport syst√®me simple
      run: |
        echo "üìã G√©n√©ration du rapport syst√®me"
        echo "==============================="
        
        echo "# Rapport des ressources syst√®me pour YOLO Detection" > system_report.md
        echo "" >> system_report.md
        echo "## Informations g√©n√©rales" >> system_report.md
        echo "- **Date**: $(date)" >> system_report.md
        echo "- **Syst√®me**: Ubuntu (GitHub Actions)" >> system_report.md
        echo "- **Architecture**: $(uname -m)" >> system_report.md
        echo "" >> system_report.md
        echo "## Performance" >> system_report.md
        echo "- **Processeurs**: $(nproc) c≈ìurs" >> system_report.md
        echo "- **M√©moire totale**: $(free -h | grep Mem | awk '{print $2}')" >> system_report.md
        echo "- **Espace disque**: $(df -h . | tail -1 | awk '{print $4}') disponible" >> system_report.md
        echo "" >> system_report.md
        echo "## Recommandations pour YOLO" >> system_report.md
        echo "- **Mod√®le recommand√©**: yolo11n.pt (√©quilibre performance/pr√©cision)" >> system_report.md
        echo "- **R√©solution sugg√©r√©e**: 640x480 pour temps r√©el" >> system_report.md
        echo "- **FPS attendu**: 15-30 FPS selon le hardware" >> system_report.md
        echo "" >> system_report.md
        echo "## Notes" >> system_report.md
        echo "- Test effectu√© en environnement CI" >> system_report.md
        echo "- Performance r√©elle peut varier selon le hardware local" >> system_report.md
        echo "- Cam√©ras physiques non testables en CI" >> system_report.md
        
        echo "üìÑ Contenu du rapport:"
        cat system_report.md
        
    - name: Badge de statut
      run: |
        echo "üèÜ Badge de statut du syst√®me"
        echo "=========================="
        
        cpu_cores=$(nproc)
        memory_gb=$(free -g | grep Mem | awk '{print $2}')
        
        if [ $cpu_cores -ge 2 ] && [ $memory_gb -ge 4 ]; then
          echo "üü¢ SYST√àME: Optimal pour YOLO"
          echo "status=optimal" >> $GITHUB_ENV
        elif [ $cpu_cores -ge 1 ] && [ $memory_gb -ge 2 ]; then
          echo "üü° SYST√àME: Acceptable pour YOLO"
          echo "status=acceptable" >> $GITHUB_ENV
        else
          echo "üî¥ SYST√àME: Limit√© pour YOLO"
          echo "status=limited" >> $GITHUB_ENV
        fi
        
    - name: Upload du rapport syst√®me
      uses: actions/upload-artifact@v3
      with:
        name: system-performance-report
        path: system_report.md
